// <auto-generated />
using System;
using GameServer.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameServer.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250415040222_script_persistent_data")]
    partial class script_persistent_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("GameServer.Core.Auth.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GameServer.Core.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrentRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PressenceText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoomId");

                    b.ToTable("Entities");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GameServer.Core.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GameServer.Core.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("GameServer.Core.Scripting.ScriptInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptData")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("RoomId");

                    b.ToTable("ScriptInstances");
                });

            modelBuilder.Entity("RoomLink", b =>
                {
                    b.Property<int>("ExitsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExitsId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomLink");
                });

            modelBuilder.Entity("GameServer.Core.Player", b =>
                {
                    b.HasBaseType("GameServer.Core.Entity");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoginRoomId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("LoginRoomId");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("GameServer.Core.Entity", b =>
                {
                    b.HasOne("GameServer.Core.Room", "CurrentRoom")
                        .WithMany("Entities")
                        .HasForeignKey("CurrentRoomId");

                    b.Navigation("CurrentRoom");
                });

            modelBuilder.Entity("GameServer.Core.Room", b =>
                {
                    b.HasOne("GameServer.Core.Region", null)
                        .WithMany("Rooms")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("GameServer.Core.Scripting.ScriptInstance", b =>
                {
                    b.HasOne("GameServer.Core.Entity", null)
                        .WithMany("Scripts")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameServer.Core.Room", null)
                        .WithMany("Scripts")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("RoomLink", b =>
                {
                    b.HasOne("GameServer.Core.Room", null)
                        .WithMany()
                        .HasForeignKey("ExitsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameServer.Core.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GameServer.Core.Player", b =>
                {
                    b.HasOne("GameServer.Core.Auth.Account", "Account")
                        .WithOne("Player")
                        .HasForeignKey("GameServer.Core.Player", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameServer.Core.Entity", null)
                        .WithOne()
                        .HasForeignKey("GameServer.Core.Player", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameServer.Core.Room", "LoginRoom")
                        .WithMany()
                        .HasForeignKey("LoginRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LoginRoom");
                });

            modelBuilder.Entity("GameServer.Core.Auth.Account", b =>
                {
                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("GameServer.Core.Entity", b =>
                {
                    b.Navigation("Scripts");
                });

            modelBuilder.Entity("GameServer.Core.Region", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("GameServer.Core.Room", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Scripts");
                });
#pragma warning restore 612, 618
        }
    }
}
